# define application variables
CLUSTER_NAME= "brnpb"                                   # ie. brnpb
APP_NAME = "mms"                                        # ie. idm-idp
APP_ROLE = "hmheng-customdev"                                 # ie. hmheng-idm
DOCKER_GROUP = "com-hmhco-mms"                          # ie. com-hmhco-idm or io-hmheng-demo
DOCKER_REGISTRY = "docker.br.hmheng.io"                 # ie. docker.br.hmheng.io
AWS_REGION = "us-east-1"                                # ie. us-east-1

## aurora cli bind
# aurora update start <cluster>/<role>/<stage>/<app-name> --bind tag=<docker-container-tag>
# EXAMPLE: aurora update start brnpb-us-east-1/hmheng-idm/prod/idm-idp --bind tag=2a254670434a49ddd7e1651b74b08d770246c586

try:
    import getpass
except ImportError:
    print "Python Module `getpass` is required, please install it 'pip install -U getpass'."

class Profile(Struct):
    cluster = Default(String, CLUSTER_NAME + "-" + AWS_REGION)
    stage = Default(String, "prod")
    environment = Default(String, "prod")
    contact = Default(String, "")
    version = Default(String, "n/a")
    tier = Default(String, "preferred")
    role = Default(String, getpass.getuser())
    docker_container = Default(String, DOCKER_REGISTRY + "/" + DOCKER_GROUP + "/" + APP_NAME)
    docker_tag = Default(String, "{{tag}}")
    autoscaling=Default(String,"standard-prod")
    oac_instances = Default(Integer, "{{instance_count}}")
    oac_subscriber_flag=Default(String, "{{subscriber_flag}}")
    oac_job_name=Default(String, "{{job_name}}")

# -- profile mappings ---
# prod|prod
# prodrv|staging3
# certrv|staging2
# cert|staging1
# int staging0
# dev devel

# -- profile instantiations (if any) ---
PRODUCTION = Profile()
CERT = Profile(
        stage="cert",
        environment="staging1",
        cluster=CLUSTER_NAME + "-" + AWS_REGION,
        tier="preferred",
        autoscaling="standard-nonprod"
)

jobs = []
task_res = Resources(cpu=0.5, ram=2 * GB, disk=1 * GB)

for profile in [CERT,PRODUCTION]:
    server_task = Task(
            name="run server",
            processes=[
                Process(
                        name="start server",
                        cmdline=
                                """export JAVA_HOME=/usr/lib/jvm/java-8-oracle &&"""
                                """ java -Xmx1768m -Xms1024m """
                                """ -Djava.security.egd=file:/dev/./urandom """
                                """ -Dspring.profiles.active={{env}} """
								""" -Doac.consumer.active={{profile.oac_subscriber_flag}} """
								""" -Djasypt.encryptor.password=5W1m1#1*fCv*UbIUzvsu"""
                                """ -jar /app.jar"""
                                """ --server.port={{thermos.ports[http]}}"""
                        		""" --management.port={{thermos.ports[health]}}""",
		                        logger=Logger(
		                        mode=LoggerMode('rotate'),
		                        rotate=RotatePolicy(log_size=100*MB, backups=10)
                                )
                ).bind(profile=profile)
            ],
            resources=task_res
    )

    jobs.append(Service(
            name="{{profile.oac_job_name}}",
            update_config=UpdateConfig(batch_size=1, watch_secs=60).bind(profile=profile),
            task=server_task,
            role="{{profile.role}}",
            contact="{{profile.contact}}",
            environment="{{profile.environment}}",
            cluster="{{profile.cluster}}",
            instances="{{profile.oac_instances}}",
            tier="{{profile.tier}}",
            constraints={"host": "limit:1", "rack": "limit:3","autoscale-type": "{{profile.autoscaling}}"},
            announce=Announcer(),
            container=Container(
                    docker=Docker(
                            image="{{profile.docker_container}}:{{profile.docker_tag}}",
                            parameters=[Parameter(name='volume',
                            value='/mnt/efs/service/roles/hmheng-customdev/mms/{{profile.environment}}/audit:/audit:rw')]
                    ).bind(profile=profile)
            ),
	        health_check_config={"health_checker": HealthCheckerConfig(
	            {"http": HttpHealthChecker({"expected_response_code": 200, "expected_response": "", })}
	        ),"max_consecutive_failures": "3"},
	        lifecycle=LifecycleConfig(http=HttpLifecycleConfig(
	             port="health", graceful_shutdown_endpoint="/shutdown", shutdown_endpoint="/shutdown"
	        ))
    ).bind(profile=profile))
