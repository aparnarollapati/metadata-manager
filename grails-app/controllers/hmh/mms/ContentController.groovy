package hmh.mms

import static org.springframework.http.HttpStatus.*
import java.util.logging.Logger
import grails.converters.JSON
import grails.transaction.Transactional

@Transactional(readOnly = true)
class ContentController {

	def guidGeneratorService
	def sortIdService
	def levelsService

	static responseFormats = ['json']
	static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]

	def keywordService

	/**
	 * Custom Action to return the list of auto-generated Common Cartridge Keywords
	 * @param content
	 * @return
	 */
	def preview(Content content){
		def previewKeywords = keywordService.identifyCommonCartridgeKeywords( content )
		render previewKeywords as JSON
	}

	def index(Integer max) {
		params.max = Math.min(max ?: 10, 100)
		respond Content.list(params), model:[contentCount: Content.count()]
	}

	def show(Content content) {
		respond content
	}

	@Transactional
	def save(Content content) {
		if (content == null) {
			transactionStatus.setRollbackOnly()
			render status: NOT_FOUND
			return
		}

		// Deal with component errors as GUID generation depends on this
		// Do not auto-generate GUID if toolType is PMT
		if (content.hmhId == null && isToolTypePmt(content) == false){
			if(content.component == null){
				content.validate(['component'])
				respond content.errors, view:'create'
				return
			}else{
				content.hmhId = getAutoGuid(content)
				content.validate()
			}
		}

		// Auto-generate SortId
		if (content.sortId == null){
			if(content.component == null){
				content.validate(['component'])
				respond content.errors, view:'create'
				return
			}else{
				content.sortId = getAutoSortId(content)
				content.validate()
			}
		}

		// Set Common Cartridge Title to displayTitle if Blank
		if (content.displayTitle && content.commonCartridgeTitle == null){
			content.commonCartridgeTitle = content.displayTitle
		}

		// deal with all errors
		if (content.hasErrors()) {
			transactionStatus.setRollbackOnly()
			respond content.errors, view:'create'
			return
		}

		// A level Keyword is copied into the Content Keyword instance
		copyLevelKeywords(content)
		// A level Standard is copied into the Content Standard instance
		copyLevelStandards(content)

		content.save flush:true

		respond content, [status: CREATED, view:"show"]
	}


	def getAutoGuid(def contentInstance){
		log.debug "Autogenerating Guid..."
		def guid = guidGeneratorService.generateGuid(contentInstance)
		log.info "Autogenerated Guid is: " + guid
		return guid
	}


	def isToolTypePmt(def contentInstance){
		if(contentInstance.component.toolType in 7..17  && contentInstance.component.toolType != 16){return true}
		return false
	}


	def getAutoSortId(def contentInstance){
		log.debug "Autogenerating SortId..."
		def sortId = sortIdService.autogenerateSortId(contentInstance)
		log.info "SortId is: " + sortId
		return sortId
	}


	def copyLevelKeywords(def contentInstance){
		def levelKeywords = levelsService.getLevelKeywords(contentInstance)

		levelKeywords.each{ keywordInstance ->
			contentInstance.addToKeywords(keyword:keywordInstance) }
	}


	def copyLevelStandards(def contentInstance){
		def levelStandards = levelsService.getLevelStandards(contentInstance)

		levelStandards.each{ standardInstance ->
			contentInstance.addToStandards(standard:standardInstance) }
	}


	@Transactional
	def update(Content content) {
		if (content == null) {
			transactionStatus.setRollbackOnly()
			render status: NOT_FOUND
			return
		}

		// Regenerate sort-id if lesson-plan, segment, strand or component was modified AND sort-Id was not
		def dirtyProperties = content.getDirtyPropertyNames()
		if ( (dirtyProperties.contains("lessonPlan") || dirtyProperties.contains("segment") || dirtyProperties.contains("strand") || dirtyProperties.contains("component") && !dirtyProperties.contains("sortId")) ){
			log.info "Regenerating sort-Id as part of Resource $content.id Update. The following properties have changed: $dirtyProperties"			
			content.sortId = getAutoSortId(content)
			content.validate()
		}


		if (content.hasErrors()) {
			transactionStatus.setRollbackOnly()
			respond content.errors, view:'edit'
			return
		}

		content.save flush:true

		respond content, [status: OK, view:"show"]
	}

	@Transactional
	def delete(Content content) {

		if (content == null) {
			transactionStatus.setRollbackOnly()
			render status: NOT_FOUND
			return
		}

		removeFromParentLevel(content)

		content.delete flush:true

		render status: NO_CONTENT
	}


	/**
	 * If a Level holds a reference to a child content that association needs to be removed to allow a successful content delete
	 * @param contentInstance
	 * @return
	 */
	def removeFromParentLevel(def contentInstance){

		if (contentInstance.topLevel){
			def topLevelInstance = contentInstance.topLevel
			topLevelInstance.removeFromContent(contentInstance)

		} else if (contentInstance.secondLevel){
			def secondLevelInstance = contentInstance.secondLevel
			secondLevelInstance.removeFromContent(contentInstance)

		} else if (contentInstance.thirdLevel){
			def thirdLevelInstance = contentInstance.thirdLevel
			thirdLevelInstance.removeFromContent(contentInstance)

		} else if (contentInstance.fourthLevel){
			def fourthLevelInstance = contentInstance.fourthLevel
			fourthLevelInstance.removeFromContent(contentInstance)

		} else if (contentInstance.fifthLevel){
			def fifthLevelInstance = contentInstance.fifthLevel
			fifthLevelInstance.removeFromContent(contentInstance)
		}
	}
}
